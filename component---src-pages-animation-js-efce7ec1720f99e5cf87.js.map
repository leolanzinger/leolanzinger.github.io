{"version":3,"file":"component---src-pages-animation-js-efce7ec1720f99e5cf87.js","mappings":"0NAiBE,MAjBF,SAAuBA,EAAMC,GACzBC,KAAKC,UAAU,EAAG,EAAGH,EAAKI,MAAOJ,EAAKK,QAEnB,EAACC,EAAGC,EAAGC,EAAQC,EAAOC,KACvCR,KAAKS,OACLT,KAAKU,YACLV,KAAKW,IAAIP,EAAGC,EAAGC,EAAQ,EAAa,EAAVM,KAAKC,IAC/Bb,KAAKc,UAAYP,EACjBP,KAAKe,YAAcP,EACnBR,KAAKgB,OACLhB,KAAKiB,YACLjB,KAAKkB,SAAS,EAGhBC,CAAWpB,EAAKK,EAAGL,EAAKM,EAAGN,EAAKO,OAAQP,EAAKQ,MAC/C,EC6IF,MAvJwB,KAEpB,IAAIa,GAAa,EACbC,EAAU,EACVC,GAAmB,EAEnBxB,EAAO,CACPI,MAAO,EACPC,OAAQ,GAERoB,GAAU,EAEd,MACMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAEtDC,GAAUC,EAAAA,EAAAA,QAAO,CAAEtB,EAAG,GAAIC,EAAG,GAAIsB,GAAI,IAAKC,GAAI,IAAKtB,OAHtC,EAG0DC,MAAOiB,EAAO,KACrFK,GAAYH,EAAAA,EAAAA,QAAO,MACnBI,GAAeJ,EAAAA,EAAAA,QAAO,MACtBK,GAAcL,EAAAA,EAAAA,QAAO,MA2BrBM,EAAe,KACjB,MAAMjC,EAAO0B,EAAQQ,QACrBlC,EAAKO,QAAU,EACXP,EAAKO,OAAS,KAAIgB,GAAmB,GACpCC,IAASO,EAAaG,QAAUC,sBAAsBF,GAAa,EAEtEG,EAAY,KACd,MAAMpC,EAAO0B,EAAQQ,QAEjBlC,EAAKO,OA1CM,GA2CXP,EAAKO,QAAWP,EAAKO,OAAS,EAC9BwB,EAAaG,QAAUC,sBAAsBC,IAG7CpC,EAAKO,OA/CM,CAgDf,EAEE8B,EAAc,KAChB,MAAMrC,EAAO0B,EAAQQ,QACjBlC,EAAKO,OAAS,IACdP,EAAKO,QAAU,EACfwB,EAAaG,QAAUC,sBAAsBE,GAC7CC,MAGAP,EAAaG,QAAUC,sBAAsBI,GAC7CD,IACJ,EAEEC,EAAc,KAChB,MAAMvC,EAAO0B,EAAQQ,QACjBlC,EAAKO,OAhEM,GAiEXP,EAAKO,QAAU,EACfwB,EAAaG,QAAUC,sBAAsBI,GAC7CD,MAGAtC,EAAKO,OAtEM,EAuEPe,EAAU,GACVA,IACAS,EAAaG,QAAUC,sBAAsBE,IAG7CrC,EAAKQ,MAAQgC,IAEjBF,IACJ,EAEEG,EAAoB,KACtBpB,GAAa,EACbC,EAAU,EACVU,EAAYE,QAAUQ,aAAY,WACzBnB,EAKDoB,cAAcX,EAAYE,UAJ1BZ,EAAU,EACVS,EAAaG,QAAUC,sBAAsBE,GAKrD,GAAG,KAAK,EAENG,EAAc,IACTf,EAAOZ,KAAK+B,MAAsB,EAAhB/B,KAAKgC,WAU5BP,EAAO,KACJR,EAAUI,UAPC,MAChB,MAAMY,EAAMhB,EAAUI,QAAQa,WAAW,MAEzCC,EAAAA,KAAmBF,EAAK/C,EAAM2B,EAAQQ,QAAQ,EAK9Ce,GACAlB,EAAaG,QAAUC,sBAAsBG,GAAK,EAoBtD,OAhBAY,EAAAA,EAAAA,YAAU,KAKN,SAASC,IACLrB,EAAUI,QAAQ/B,MAAQJ,EAAKI,MAC/B2B,EAAUI,QAAQ9B,OAASL,EAAKK,MACpC,CAEA,OATAL,EAAKI,MAAQiD,OAAOC,WACpBtD,EAAKK,OAASgD,OAAOE,YACrBxB,EAAUI,QAAQ/B,MAAQJ,EAAKI,MAC/B2B,EAAUI,QAAQ9B,OAASL,EAAKK,OAKhCgD,OAAOG,iBAAiB,UAAU,IAAMJ,MACjC,KACPK,qBAAqBzB,EAAaG,SAChCkB,OAAOK,oBAAoB,SAAUN,EAAa,CACnD,GACA,IAEE,0BACHO,UAAU,SACVvD,MAAOJ,EAAKI,MACZC,OAAQL,EAAKI,MACbwD,IAAK7B,EACL8B,YA5HqBC,IACrB,IAAIxD,EAAIwD,EAAMC,QACVxD,EAAIuD,EAAME,QACd,MAAM/D,EAAO0B,EAAQQ,QACrBlC,EAAKK,EAAIA,EACTL,EAAKM,EAAIA,EACLe,IACAU,EAAaG,QAAUC,sBAAsBM,IAEjDH,GAAM,EAoHN0B,YAlHoB,KACpBxC,GAAU,EACVH,GAAa,EACbU,EAAaG,QAAUC,sBAAsBF,EAAa,EAgH1DgC,UA9GkB,KAClBzC,GAAU,EACGE,EAAQQ,QAChB1B,MAAQgC,IACbJ,GAAW,GA2Gb,ECjJN,MAJsB,IACX,gBAAC,EAAe,MAKpB,MAAM8B,EAAO,IAAM,6BAAO,iC","sources":["webpack://leolanzinger.github.io/./src/components/framerender.js","webpack://leolanzinger.github.io/./src/components/AnimationCanvas.js","webpack://leolanzinger.github.io/./src/pages/animation.js"],"sourcesContent":["function frameRenderer(size, ball) {\n    this.clearRect(0, 0, size.width, size.height);\n  \n    const drawCircle = (x, y, radius, color, alpha) => {\n      this.save();\n      this.beginPath();\n      this.arc(x, y, radius, 0, Math.PI * 2);\n      this.fillStyle = color;\n      this.globalAlpha = alpha;\n      this.fill();\n      this.closePath();\n      this.restore();\n    };\n  \n    drawCircle(ball.x, ball.y, ball.radius, ball.color);\n  }\n  \n  export default frameRenderer;\n  ","import * as React from \"react\"\nimport { useRef, useEffect } from \"react\";\nimport \"../styles/style.css\"\nimport frameRenderer from \"./framerender\";\n\nconst AnimationCanvas = () => {\n    // onboarding animation variable\n    let onboarding = true;\n    let bounces = 0;\n    let canvasIsAnimated = false;\n    // canvas variables\n    let size = {\n        width: 0,\n        height: 0\n    }\n    let mouseUp = true;\n    // ball variables\n    const baseRadius = 2;\n    const colors = [\"#F1C40F\", \"#1ABC9C\", \"#3498DB\", \"#9B59B6\", \"#95A5A6\"];\n    // refs\n    const ballRef = useRef({ x: 50, y: 50, vx: 3.9, vy: 3.9, radius: baseRadius, color: colors[0] });\n    const canvasRef = useRef(null);\n    const requestIdRef = useRef(null);\n    const intervalRef = useRef(null);\n\n    // MOUSE HANDLING\n    const handleMouseMove = (event) => {\n        var x = event.clientX;\n        var y = event.clientY;\n        const ball = ballRef.current;\n        ball.x = x;\n        ball.y = y;\n        if (onboarding) {\n            requestIdRef.current = requestAnimationFrame(animateOnboarding);\n        }\n        tick();\n    }\n    const handleMouseDown = () => {\n        mouseUp = false;\n        onboarding = false;\n        requestIdRef.current = requestAnimationFrame(increaseBall);\n    }\n    const handleMouseUp = () => {\n        mouseUp = true;\n        const ball = ballRef.current;\n        ball.color = randomColor();\n        resetBall();\n    }\n\n    // BALL ANIMATION\n    const increaseBall = () => {\n        const ball = ballRef.current;\n        ball.radius += 4;\n        if (ball.radius > 10) canvasIsAnimated = true;\n        if (!mouseUp) requestIdRef.current = requestAnimationFrame(increaseBall);\n    }\n    const resetBall = () => {\n        const ball = ballRef.current;\n        // bounce animation\n        if (ball.radius > baseRadius) {\n            ball.radius -= (ball.radius / 6);\n            requestIdRef.current = requestAnimationFrame(resetBall);\n        }\n        else {\n            ball.radius = baseRadius;\n        }\n    }\n    const inflateBall = () => {\n        const ball = ballRef.current;\n        if (ball.radius < 20) {\n            ball.radius += 4;\n            requestIdRef.current = requestAnimationFrame(inflateBall);\n            tick();\n        }\n        else {\n            requestIdRef.current = requestAnimationFrame(deflateBall);\n            tick();\n        }\n    }\n    const deflateBall = () => {\n        const ball = ballRef.current;\n        if (ball.radius > baseRadius) {\n            ball.radius -= 4;\n            requestIdRef.current = requestAnimationFrame(deflateBall);\n            tick();\n        }\n        else {\n            ball.radius = baseRadius;\n            if (bounces < 2) {\n                bounces++;\n                requestIdRef.current = requestAnimationFrame(inflateBall);\n            }\n            else {\n                ball.color = randomColor();\n            }\n            tick();\n        }\n    }\n    const animateOnboarding = () => {\n        onboarding = false;\n        bounces = 0;\n        intervalRef.current = setInterval(function() {\n            if (!canvasIsAnimated) {\n                bounces = 0;\n                requestIdRef.current = requestAnimationFrame(inflateBall);\n            }\n            else {\n                clearInterval(intervalRef.current);\n            }\n        }, 3600);\n    }\n    const randomColor = () => {\n        return colors[Math.floor(Math.random() * 5)];\n    }\n\n    // FRAME RENDERING\n    const renderFrame = () => {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        // updateBall();\n        frameRenderer.call(ctx, size, ballRef.current);\n      };    \n\n    const tick = () => {\n        if (!canvasRef.current) return;\n        renderFrame();\n        requestIdRef.current = requestAnimationFrame(tick);\n    };\n\n    // ON MOUNT\n    useEffect(() => {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        canvasRef.current.width = size.width;\n        canvasRef.current.height = size.height;\n        function handleResize() {    \n            canvasRef.current.width = size.width;\n            canvasRef.current.height = size.height;\n        }\n        window.addEventListener(\"resize\", () => handleResize());\n        return () => {\n        cancelAnimationFrame(requestIdRef.current);\n          window.removeEventListener(\"resize\", handleResize);\n        };\n      }, []);\n\n    return <canvas\n        className=\"canvas\"\n        width={size.width}\n        height={size.width}\n        ref={canvasRef}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n    />;\n}\n\nexport default AnimationCanvas;\n","import * as React from \"react\"\nimport \"../styles/style.css\"\nimport AnimationCanvas from \"../components/AnimationCanvas\";\n\nconst AnimationPage = () => {\n    return <AnimationCanvas />;\n}\n\nexport default AnimationPage\n\nexport const Head = () => <title>Leonardo Lanzinger - animation</title>"],"names":["size","ball","this","clearRect","width","height","x","y","radius","color","alpha","save","beginPath","arc","Math","PI","fillStyle","globalAlpha","fill","closePath","restore","drawCircle","onboarding","bounces","canvasIsAnimated","mouseUp","colors","ballRef","useRef","vx","vy","canvasRef","requestIdRef","intervalRef","increaseBall","current","requestAnimationFrame","resetBall","inflateBall","tick","deflateBall","randomColor","animateOnboarding","setInterval","clearInterval","floor","random","ctx","getContext","frameRenderer","renderFrame","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","cancelAnimationFrame","removeEventListener","className","ref","onMouseMove","event","clientX","clientY","onMouseDown","onMouseUp","Head"],"sourceRoot":""}